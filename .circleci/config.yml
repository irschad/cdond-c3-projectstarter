version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

jobs:
  hello-world: # Delete this job when you get started
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Say Hello
          command: |
            echo "Hello World"
  analyze-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Analyze frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
        
  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Analyze backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm i
            npm run build
            
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test backend
          command: |
            cd backend
            npm i
            npm run test
  
  deploy-frontend-infra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy frontend infrastructure
          command: |
            aws cloudformation create-stack \
              --stack-name autofrontenduda \
              --template-body file://./.circleci/files/frontend.yml \
              --region us-east-1 
           
  deploy-backend-infra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy network infra 
          command: |
            aws cloudformation create-stack \
              --stack-name autonetworkuda
              --template-body file://./.circleci/files/network.yml \
              --region us-east-1
      - run:
          name: Deploy backend infra
          command: |
            aws cloudformation create-stack \
              --stack-name autobackenduda \
              --template-body file://./.circleci/files/backend.yml \
              --region us-east-1 
              
  config-infra-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Install AWS CLI in the node container"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: "Build Front-End"
          command: |
            API_IP=$(aws ec2 --region us-east-1 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $API_IP
            cd frontend
            export API_URL=http://$API_IP:3030
            echo $API_URL
            npm install
            npm run build
      - run:
          name: "Copying the FrontEnd files to S3"
          command: |
            aws s3 cp frontend/dist s3://udapeople-udastackid/ --recursive  
  
  config-infra-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0a:ab:9c:78:ab:04:4e:29:a7:dc:63:62:36:ad:c8:c4"]  
      - run:
          name: "Install AWS CLI to get EC2 endpoints"
          command: |
            apk add --no-cache python py-pip
            pip install awscli
      - run:
          name: "Install dependencies"
          command: |
            apk add --update ansible
      - run:
          name: "Save IP address of EC2 instance to inventory file"
          command: |
            cd .circleci/ansible
            echo "[all]" > inventory
            API_IP=$(aws ec2 --region us-east-1 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $API_IP > inventory
      - run:
          name: "Configure ubuntu server"
          command: |
            cd .circleci/ansible \
            ansible-playbook -i inventory main.yml			

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:
  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Install AWS CLI"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: "Smoke Test for Backend"
          command: |
                export API_IP=$(aws ec2 --region us-east-1 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text)
                echo $API_IP
                curl "http://${API_IP}:3030/api/status"
      - run:
          name: "Smoke Test for Frontend"
          command: |
                URL="http://udapeople-udastackid.s3.amazonaws.com/index.html#/employees"
                if curl -s ${URL} | grep "Welcome"
                then
                  return 1
                else
                  return 0
                fi

#  cloudfront-update:

workflows:
  default:
    jobs:
      - hello-world
      
  frontend:
    jobs:
      - analyze-frontend
      - build-frontend:
          requires:
            - analyze-frontend   
      - test-frontend:
          requires:
            - build-frontend
      - deploy-frontend-infra:
          requires:
            - test-frontend
      - config-infra-frontend:
          requires:
            - deploy-frontend-infra
      - smoke-test:
          requires:
            - config-infra-frontend 
            
  backend:
    jobs:
      - analyze-backend
      - build-backend: 
          requires:
            - analyze-backend
      - test-backend:
          requires:
            - build-backend
      - deploy-backend-infra:
          requires:
           - test-backend
      - config-infra-backend:
          requires:
            - deploy-backend-infra
           
