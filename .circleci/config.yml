version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:
  destroy-environment:
    description: Destroy all cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Delete all files in the current S3 bucket
          command: |
            if aws s3api head-bucket --bucket udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            then
              aws s3 rm s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID}/ --recursive
            fi
          when: on_fail
      - run:
          name: Delete the current AWS CloudFormation stacks
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  revert-migration:
    description: Revert the last migration
    steps:
      - checkout
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm run migrations:revert

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Frontend Code
          command: |
            cd frontend
            npm i
            npm run build
            
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Backend Code
          command: |
            cd backend
            npm i
            npm run build
            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm run test
            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test Backend Code
          command: |
            cd backend
            npm i
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Analyze and resolve frontend dependencies
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical
            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Analyze and resolve backend dependencies
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: backend infra
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-override ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udaPeople
      - run:
          name: Save the URL of EC2 instance to https://memstash.io/
          command: |
            HOST_NAME=$(aws ec2 describe-instances --region us-east-1 --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo ${HOST_NAME}
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data ${HOST_NAME}  https://api.memstash.io/values/host_name         
      - run:
          name: frontend infra
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Add Backend EC2 Instance IP to inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - add_ssh_keys:
          fingerprints: ["0a:ab:9c:78:ab:04:4e:29:a7:dc:63:62:36:ad:c8:c4"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Add env file
          command: |
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
            echo "ENVIRONMENT=${ENVIRONMENT}" >> backend/.env
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            tar -czvf ../../backend.tar.gz ../../backend
            ansible-playbook -i inventory.txt main.yml        
      - destroy-environment

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache tar
            apk add --no-cache gzip
            apk add --no-cache ansible
            apk add --no-cache nodejs
            apk add --no-cache npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=$API_URL" >> frontend/.env
            echo "${API_URL}"
      - run:
          name: "Baking backend API_URL into the front-end"
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm i
            npm run build      
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID}".tar.gz dist
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-frontend-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive  
      - destroy-environment
      - revert-migration

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Smoke test backend
          command: |
            export BACKEND_IP=$(aws ec2 --region us-east-1 describe-instances \
                  --filters Name=instance-state-name,Values=running \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text)
            echo ${BACKEND_IP}
            APP_URL="http://${BACKEND_IP}:3030/api/status"
            echo ${APP_URL}
            curl ${APP_URL}
      - run:
          name: Smoke test frontend
          command: |
            URL="http://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employee"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migration

  deploy-cloudfront:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: create cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople  
              
  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0a:ab:9c:78:ab:04:4e:29:a7:dc:63:62:36:ad:c8:c4"]
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Old Workflow Id: "$OldWorkflowID"
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople &
            if [[ "$STACKS[@]" =~ "$OldWorkflowID" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      - destroy-environment
      - revert-migration

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-frontend:
          requires: [configure-infrastructure]
      - smoke-test:
          requires: [deploy-frontend]
      - deploy-cloudfront:
          requires: [smoke-test]
 #     - cloudfront-update:
 #         requires: [smoke-test]
